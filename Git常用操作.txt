【0】参考：
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

【1】
git init
# git init 命令把 当前目录 变成 Git 可以管理的仓库：

【2】
git add readme.txt
# 把文件 readme.txt 添加到仓库

【3】
git commit -m "wrote a readme file"
# 把文件提交到仓库
# -m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录

【4】
git status
# 看看结果

【5】
git diff readme.txt 
# 查看 文件readme.txt 具体修改了什么内容

【6】
git log
# 显示从最近到最远的提交日志
# 如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
# git log --pretty=oneline
# 一大串类似 6a71737dc3d99805fbe32fc9213f62feb1a3653d 的是commit id（版本号

【7】
git reset --hard HEAD^
# 把当前版本 回退到上一个版本
# 在Git中，用HEAD表示当前版本，也就是最新的提交的那个版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100

【8】
git reset --hard 1094a
# 从旧版本回到新的版本， 找到那个 新版本的commit id （例如这里的：1094a）
# 版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了

【9】
git reflog
# 记录你的每一次命令， 重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本

【10】


【11】
git remote add origin git@github.com:NewMai/gitTest.git
# 关联本地创库与远程创库

【12】
git push -u origin master  # 第一次提交的时候需要
git push origin master
# 把本地master分支的最新修改推送至GitHub

【13】
git branch dev  # 创建dev分支
git checkout dev  # 切换到dev分支
# 也可以两个命令合并成一个命令： git checkout -b dev

【14】
git branch
# 查看当前分支， git branch命令会列出所有分支，当前分支前面会标一个*号

【15】
git merge dev
# git merge命令用于合并 dev 分支到当前分支

【16】
git branch -d dev
# 合并完成后，就可以放心地删除dev分支了

【17】
git add
# add all files in your repository





【Problem】:
如果输入$  git remote add origin git@github.com:NewMai/gitTest.git
提示出错信息：fatal: remote origin already exists.
【Solved】
先输入$ git remote rm origin
再输入$ git remote add origin git@github.com:djqiang/gitdemo.git 就不会报错了！




